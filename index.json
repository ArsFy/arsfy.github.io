[{"content":"PVE (Proxmox VE) 提供 VM Template 功能，把一台已經創建好的 VM 轉換為 Template，這在需求大量相同 VM 的場景非常有用。\n本節將會展示如何製作 VM Template，並配置 Cloud-init 等。\n瞭解必要内容 1. 為什麽需要 VM Template？ VM Template 可以幫到你快速創建即建即用的預設 VM，以模板形式無限克隆。\n2. 什麽是 cloud-init cloud-init 是一種在 VM 首次啓動時初始化自定義配置的程式，可以自動化設定 username, password, ip, sshKey 等。\n開始 1. 作業系統鏡像 示例將會使用 debian 11 作爲演示\ncloud-init 是一個應用程式，推薦使用包含 cloud-init 的系統鏡像進行安裝，各大發行版都會有提供 cloud 版本。\n打開下載頁面，下載自己需要的版本 / 架構。\n本次示例要下載的是 debian 11 的 AMD64 版本，記得下載 qcow2 格式或者 img 格式。\nhttps://cloud.debian.org/images/cloud/bullseye/20230802-1460/debian-11-generic-amd64-20230802-1460.qcow2 使用 wget 下載到當前目錄備用，並重命名為 debian-11-amd64.qcow2\nwget -O debian-11-amd64.qcow2 https://cloud.debian.org/images/cloud/bullseye/20230802-1460/debian-11-generic-amd64-20230802-1460.qcow2 2. 創建 VM 在成為 Template 之前，首先是一台可以正常使用的 VM，這裏使用 qm 命令創建 VM。\n2: CPU 核心數 8000: VM ID，請盡量使用足夠高的 ID 以防止和普通 VM 衝突 2048: 記憶體大小，單位 MB virtio,bridge=vmbr0: 虛擬 netcard，virtio 類型並橋接在 vmbr0 上面，請提前創建 Linux 橋 vmbr0 在這裏省略任何參數都將使用默認值，非必要裝置不會創建 qm create 8000 --cores 2 --memory 2048 --name debian-11 --net0 virtio,bridge=vmbr0 3. 導入虛擬 Disk 8000: 在第二步創建的 VM ID debian-11-amd64.qcow2: 在第一步下載的作業系統鏡像 local: 這是 pve 默認的儲存空間命名，如果你有修改/創建過儲存空間，請按你的設定填寫 qm importdisk 8000 debian-11-amd64.qcow2 local 4. 設定虛擬 Disk 被導入的虛擬 Disk 不包含任何設定，他將會是 unused 狀態，需要設定裝置才可以使用\n8000: 在第二步創建的 VM ID local: 這是 pve 默認的儲存空間命名，如果你有修改/創建過儲存空間，請按你的設定填寫 qm set 8000 --scsihw virtio-scsi-pci --scsi0 local:vm-8000-disk-0 5. 創建 cloud-init 裝置 cloud-init 需要 hardware 傳遞設定，把它綁定在沒有被使用的 ide0 上面\n8000: 在第二步創建的 VM ID local: 這是 pve 默認的儲存空間命名，如果你有修改/創建過儲存空間，請按你的設定填寫 qm set 8000 --ide0 local:cloudinit 6. 設定啓動引導 cloud 鏡像不包含引導，需要手動設定啓動裝置\n8000: 在第二步創建的 VM ID scsi0: 在第四步設定的虛擬 Disk 裝置名稱 qm set 8000 --boot c --bootdisk scsi0 7. 設定串口以正常使用部分控制器（可選） 8000: 在第二步創建的 VM ID qm set 8000 --serial0 socket --vga serial0 8. 設定 cloud-init 設定 cloud-init 以在第一次啓動時正常登入\n8000: 在第二步創建的 VM ID \u0026lt;username\u0026gt;: 登入用的使用者名稱 \u0026lt;password\u0026gt;: 登入用的使用者密碼 --ipconfig0: 0 對應虛擬 netcard 0 (net0)，cloud-init 將會設定 net0 的初始化網絡 如使用 dhcp 可以設定為 ip=dhcp qm set 8000 --ciuser \u0026lt;username\u0026gt; --cipassword \u0026lt;password\u0026gt; --ipconfig0 ip=192.168.1.2/24,gw=192.168.1.1 9. 啓動 VM 進行手動調整 這個部分按個人需求修改，但是我可以給出一些修改建議\nCPU: 可以手動設定一些性能優化參數 SSH: cloud 鏡像默認禁止純密碼登入，如有需要可以設定允許 APT: 手動更新包管理器源，安裝常用工具如 git 等 10. 轉換為 Template 在確定所有東西都已經被修改完畢后，關閉 VM 並把它轉換爲 Template\n8000: 在第二步創建的 VM ID qm template 8000 Template 已經創建完畢，關於 Clone 和自動化程式碼的内容將會在下一節出現。\n","permalink":"https://arsfy.top/post/pve-qm-2/","summary":"PVE (Proxmox VE) 提供 VM Template 功能，把一台已經創建好的 VM 轉換為 Template，這在需求大量相同 VM 的場景非常有用。 本節將會展示如何製作 VM Template，並","title":"PVE qm 命令 #2: 製作 VM Template"},{"content":"PVE (Proxmox VE) 提供 qm 命令管理所有 vm，本節將會展示如何使用 qm 命令獲取/變更 vm 的狀態。\n獲取 VM 的狀態 qm status \u0026lt;vmid\u0026gt; VM 一共存在五種不同的狀態:\nRunning (運行中): status: running Stopped (停止): status: stopped Suspended (挂起): status: suspended Unknown (未知): status: unknown Not exist (不存在) Configuration file \u0026#39;nodes/\u0026lt;host\u0026gt;/qemu-server/\u0026lt;vmid\u0026gt;.conf\u0026#39; does not exist Golang 實例程式碼:\nfunc GetVmStatus(id string) string { cmd := exec.Command(\u0026#34;qm\u0026#34;, \u0026#34;status\u0026#34;, id) output, err := cmd.Output() if err != nil { log.Printf(\u0026#34;Failed to get VM status: %v\u0026#34;, err) } if !strings.Contains(string(output), \u0026#34;does not exist\u0026#34;) { return strings.TrimSpace(strings.Replace(string(output), \u0026#34;status: \u0026#34;, \u0026#34;\u0026#34;, -1)) } else { return \u0026#34;not_exist\u0026#34; } } 變更 VM 的狀態 在執行部分動作時，作業系統可能不會回應你的請求，必要時請使用强制動作\nqm xxx \u0026lt;vmid\u0026gt; Start (啓動) qm start \u0026lt;vmid\u0026gt; Shutdown (關機) 這個動作可以選擇包含强制執行參數 --forceStop 1，作業系統可能不會回應這個動作\nqm shutdown \u0026lt;vmid\u0026gt; Stop (停止) 這個動作可以選擇包含强制執行參數 --forceStop 1\nqm stop \u0026lt;vmid\u0026gt; Reboot (重新啓動) qm reboot \u0026lt;vmid\u0026gt; Suspent (挂起) 保留當前 VM 狀態，並暫停 VM\nqm suspent \u0026lt;vmid\u0026gt; Resume (恢復) 恢復被挂起的 VM\nqm resume \u0026lt;vmid\u0026gt; Reset (重設) 强制重新啓動 VM，在 VM Clone -\u0026gt; Reset disk 后首次啓動引起的内核錯誤可以自動化執行這個動作解決\nqm reset \u0026lt;vmid\u0026gt; Destroy (刪除) 刪除指定 VM 和指定 VM 相關的所有 Hardware (完整刪除)\nqm destroy \u0026lt;vmid\u0026gt; ","permalink":"https://arsfy.top/post/pve-qm-1/","summary":"PVE (Proxmox VE) 提供 qm 命令管理所有 vm，本節將會展示如何使用 qm 命令獲取/變更 vm 的狀態。 獲取 VM 的狀態 qm status \u0026lt;vmid\u0026gt; VM 一共存在五種不同的狀態: Running (運行中): status: running Stopped","title":"PVE qm 命令 #1: 獲取/变更 VM 狀態"}]